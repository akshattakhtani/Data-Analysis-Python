# demographic_data_analyzer.py
import pandas as pd

def calculate_demographic_data(df):
    """
    Analyzes demographic data from a census dataset.
    
    Parameters:
        df (pd.DataFrame): DataFrame containing the demographic data.
        
    Returns:
        dict: Dictionary with answers to all questions.
    """
    
    # 1. How many people of each race are represented in this dataset? 
    race_count = df['race'].value_counts()
    
    # 2. Average age of men
    average_age_men = round(df[df['sex'] == 'Male']['age'].mean(), 1)
    
    # 3. Percentage of people who have a Bachelor's degree
    percentage_bachelors = round(
        (df['education'] == 'Bachelors').mean() * 100, 1
    )
    
    # 4 & 5. Percentage of people with and without advanced education earning >50K
    advanced_education = ['Bachelors', 'Masters', 'Doctorate']
    higher_edu = df['education'].isin(advanced_education)
    lower_edu = ~higher_edu
    
    higher_edu_rich = df[higher_edu & (df['salary'] == '>50K')]
    lower_edu_rich = df[lower_edu & (df['salary'] == '>50K')]
    
    percentage_higher_edu_rich = round(
        len(higher_edu_rich) / len(df[higher_edu]) * 100, 1
    )
    percentage_lower_edu_rich = round(
        len(lower_edu_rich) / len(df[lower_edu]) * 100, 1
    )
    
    # 6. Minimum number of hours a person works per week
    min_work_hours = df['hours-per-week'].min()
    
    # 7. Percentage of people working minimum hours per week that earn >50K
    num_min_workers = df[df['hours-per-week'] == min_work_hours]
    rich_min_workers = num_min_workers[num_min_workers['salary'] == '>50K']
    rich_percentage = round(len(rich_min_workers) / len(num_min_workers) * 100, 1)
    
    # 8. Country with highest percentage of people earning >50K
    country_counts = df['native-country'].value_counts()
    rich_country_counts = df[df['salary'] == '>50K']['native-country'].value_counts()
    
    # Calculate percentages
    country_percentages = (rich_country_counts / country_counts * 100).fillna(0)
    highest_earning_country = country_percentages.idxmax()
    highest_earning_country_percentage = round(country_percentages.max(), 1)
    
    # 9. Most popular occupation for those who earn >50K in India
    india_rich = df[(df['native-country'] == 'India') & (df['salary'] == '>50K')]
    top_IN_occupation = india_rich['occupation'].value_counts().idxmax() if not india_rich.empty else None
    
    # Return results as a dictionary
    return {
        'race_count': race_count,
        'average_age_men': average_age_men,
        'percentage_bachelors': percentage_bachelors,
        'percentage_higher_edu_rich': percentage_higher_edu_rich,
        'percentage_lower_edu_rich': percentage_lower_edu_rich,
        'min_work_hours': min_work_hours,
        'rich_percentage': rich_percentage,
        'highest_earning_country': highest_earning_country,
        'highest_earning_country_percentage': highest_earning_country_percentage,
        'top_IN_occupation': top_IN_occupation
    }


# -------------------------
# For testing independently
# -------------------------
if __name__ == "__main__":
    # Load dataset (adjust path if necessary)
    df = pd.read_csv("adult.data.csv", header=None, names=[
        'age','workclass','fnlwgt','education','education-num','marital-status',
        'occupation','relationship','race','sex','capital-gain','capital-loss',
        'hours-per-week','native-country','salary'
    ])
    
    results = calculate_demographic_data(df)
    
    for key, value in results.items():
        print(f"{key}: {value}\n")
